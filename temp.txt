import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLEventReader;
import javax.xml.stream.events.XMLEvent;
import javax.xml.stream.events.StartElement;
import javax.xml.stream.events.EndElement;
import javax.xml.stream.XMLStreamException;
import java.io.FileInputStream;
import java.util.Stack;

public class XmlProcessor {

    public void printFirstPAResponseTags(String xmlFilePath) {
        XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();

        try {
            XMLEventReader reader = xmlInputFactory.createXMLEventReader(new FileInputStream(xmlFilePath));
            boolean insidePAResponse = false; // Flag to track if we're inside the PAResponse tag
            Stack<String> tagPath = new Stack<>(); // Stack to keep track of nested tags

            while (reader.hasNext()) {
                XMLEvent event = reader.nextEvent();
                if (event.isStartElement()) {
                    StartElement startElement = event.asStartElement();
                    String tagName = startElement.getName().getLocalPart();

                    if ("PAResponse".equals(tagName)) {
                        insidePAResponse = true;
                        continue; // Skip the PAResponse tag itself
                    }

                    if (insidePAResponse) {
                        tagPath.push(tagName);
                        printTagPath(tagPath); // Print the path for the current tag
                    }
                } else if (event.isEndElement()) {
                    EndElement endElement = event.asEndElement();
                    String tagName = endElement.getName().getLocalPart();

                    if ("PAResponse".equals(tagName) && insidePAResponse) {
                        insidePAResponse = false;
                        tagPath.clear(); // Clear the stack as we are out of PAResponse
                        break; // Exit after the end of the first PAResponse tag
                    }

                    if (!tagPath.isEmpty() && tagName.equals(tagPath.peek())) {
                        tagPath.pop();
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void printTagPath(Stack<String> tagPath) {
        // Skip printing if the stack is empty
        if (!tagPath.isEmpty()) {
            String prefix = String.join("_", tagPath);
            System.out.println(prefix);
        }
    }

    public static void main(String[] args) {
        XmlProcessor processor = new XmlProcessor();
        processor.printFirstPAResponseTags("path_to_your_xml_file.xml"); // Replace with your actual file path
    }
}
