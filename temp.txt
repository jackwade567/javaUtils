import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLEventReader;
import javax.xml.stream.events.XMLEvent;
import javax.xml.stream.events.StartElement;
import javax.xml.stream.events.Characters;
import javax.xml.stream.events.EndElement;
import javax.xml.stream.XMLStreamException;
import java.io.FileInputStream;
import java.util.Stack;

public class XmlProcessor {

    public void printEndTagValuesWithHierarchy(String xmlFilePath) {
        XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();

        try {
            XMLEventReader reader = xmlInputFactory.createXMLEventReader(new FileInputStream(xmlFilePath));
            Stack<String> tagPath = new Stack<>();
            StringBuilder elementValue = new StringBuilder();
            boolean insidePAResponse = false;

            while (reader.hasNext()) {
                XMLEvent event = reader.nextEvent();

                if (event.isStartElement()) {
                    StartElement startElement = event.asStartElement();
                    String tagName = startElement.getName().getLocalPart();
                    if ("PAResponse".equals(tagName)) {
                        insidePAResponse = true;
                        continue; // Skip the PAResponse tag but mark that we're inside it
                    }
                    if (insidePAResponse) {
                        tagPath.push(tagName); // Push the tag name onto the stack
                        elementValue.setLength(0); // Reset the element value
                    }
                } else if (event.isCharacters() && insidePAResponse) {
                    elementValue.append(event.asCharacters().getData());
                } else if (event.isEndElement()) {
                    EndElement endElement = event.asEndElement();
                    String tagName = endElement.getName().getLocalPart();
                    if ("PAResponse".equals(tagName)) {
                        insidePAResponse = false;
                    } else if (insidePAResponse && !tagPath.isEmpty() && tagName.equals(tagPath.peek())) {
                        // Only print the tag and value if this is an end tag within PAResponse
                        if (tagPath.size() > 1) { // Ensure it's not a direct child of PAResponse
                            String fullPath = buildPath(tagPath);
                            System.out.println(fullPath + ": " + elementValue.toString().trim());
                        }
                        tagPath.pop();
                        elementValue.setLength(0); // Reset the element value
                    }
                }
            }
        } catch (XMLStreamException e) {
            e.printStackTrace();
        }
    }

    private String buildPath(Stack<String> tagPath) {
        // Join the tags using underscores, but skip the PAResponse tag
        Stack<String> tempStack = new Stack<>();
        tempStack.addAll(tagPath);
        tempStack.pop(); // Remove the current tag
        
        StringBuilder pathBuilder = new StringBuilder();
        while (!tempStack.isEmpty()) {
            pathBuilder.insert(0, tempStack.pop());
            if (!tempStack.isEmpty()) {
                pathBuilder.insert(0, "_");
            }
        }
        return pathBuilder.toString();
    }

    public static void main(String[] args) {
        XmlProcessor processor = new XmlProcessor();
        processor.printEndTagValuesWithHierarchy("path_to_your_xml_file.xml"); // Replace with the actual file path
    }
}
