import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLEventReader;
import javax.xml.stream.events.XMLEvent;
import javax.xml.stream.events.StartElement;
import javax.xml.stream.events.EndElement;
import javax.xml.stream.XMLStreamException;
import java.io.FileInputStream;
import java.util.Stack;

public class XmlProcessor {

    public void printFirstPAResponseTagValues(String xmlFilePath) {
        XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();

        try {
            XMLEventReader reader = xmlInputFactory.createXMLEventReader(new FileInputStream(xmlFilePath));
            boolean insidePAResponse = false;
            Stack<String> tagPath = new Stack<>();
            boolean isLeaf = true; // Flag to check if the current tag is a leaf

            while (reader.hasNext()) {
                XMLEvent event = reader.nextEvent();

                if (event.isStartElement()) {
                    StartElement startElement = event.asStartElement();
                    String tagName = startElement.getName().getLocalPart();

                    if ("PAResponse".equals(tagName)) {
                        insidePAResponse = true;
                    } else if (insidePAResponse) {
                        tagPath.push(tagName); // Push the tag name onto the stack
                        isLeaf = true; // Assume this tag is a leaf until we find a nested tag
                    }
                } else if (event.isCharacters() && insidePAResponse && !event.asCharacters().isWhiteSpace()) {
                    if (isLeaf) { // Only print the value if the current tag is a leaf
                        String value = event.asCharacters().getData();
                        printTagPath(tagPath, value); // Print the tag and value
                    }
                } else if (event.isEndElement()) {
                    EndElement endElement = event.asEndElement();
                    String tagName = endElement.getName().getLocalPart();

                    if ("PAResponse".equals(tagName)) {
                        insidePAResponse = false;
                        break; // We're done with the first PAResponse
                    }

                    if (insidePAResponse && !tagPath.isEmpty() && tagName.equals(tagPath.peek())) {
                        if (isLeaf) {
                            // If no value was printed for this leaf, print the tag with an empty value
                            printTagPath(tagPath, "");
                        }
                        tagPath.pop(); // Remove the tag from the stack after processing
                        isLeaf = false; // Reset the leaf flag as we move up the tree
                    }
                }

                // If we find a start element within another, then the previous tag is not a leaf
                if (event.isStartElement() && !tagPath.isEmpty()) {
                    isLeaf = false;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void printTagPath(Stack<String> tagPath, String value) {
        if (!tagPath.isEmpty()) {
            // Create a prefix excluding the 'PAResponse' and the current tag itself
            String prefix = String.join("_", tagPath.subList(1, tagPath.size())); // Exclude the "PAResponse" tag
            if (!prefix.isEmpty()) {
                System.out.println(prefix + ": " + value);
            }
        }
    }

    public static void main(String[] args) {
        XmlProcessor processor = new XmlProcessor();
        processor.printFirstPAResponseTagValues("path_to_your_xml_file.xml"); // Replace with the file path
    }
}
