import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLEventReader;
import javax.xml.stream.events.XMLEvent;
import javax.xml.stream.events.StartElement;
import javax.xml.stream.events.EndElement;
import javax.xml.stream.XMLStreamException;
import java.io.FileInputStream;
import java.util.Stack;

public class XmlProcessor {

    public void printFirstPAResponseTagValues(String xmlFilePath) {
        XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();

        try {
            XMLEventReader reader = xmlInputFactory.createXMLEventReader(new FileInputStream(xmlFilePath));
            boolean insidePAResponse = false;
            Stack<String> tagPath = new Stack<>();
            String currentText = "";

            while (reader.hasNext()) {
                XMLEvent event = reader.nextEvent();
                
                if (event.isStartElement()) {
                    StartElement startElement = event.asStartElement();
                    String tagName = startElement.getName().getLocalPart();
                    if ("PAResponse".equals(tagName)) {
                        insidePAResponse = true;
                    } else if (insidePAResponse) {
                        tagPath.push(tagName);
                        currentText = ""; // Reset current text when starting a new element
                    }
                } else if (event.isCharacters() && insidePAResponse) {
                    currentText = event.asCharacters().getData().trim();
                } else if (event.isEndElement()) {
                    EndElement endElement = event.asEndElement();
                    String tagName = endElement.getName().getLocalPart();

                    if ("PAResponse".equals(tagName)) {
                        insidePAResponse = false;
                        break; // Stop after exiting the PAResponse tag
                    } else if (insidePAResponse && !tagPath.isEmpty() && tagName.equals(tagPath.peek())) {
                        if (!currentText.isEmpty() || tagPath.size() == 1) {
                            // Print the tag and its value only if it has text or is a direct child of PAResponse
                            printTagPath(tagPath);
                            System.out.println(": " + currentText);
                        }
                        tagPath.pop(); // Remove the tag from the stack after processing
                        currentText = ""; // Reset current text after printing a value
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void printTagPath(Stack<String> tagPath) {
        if (!tagPath.isEmpty()) {
            // We want to skip the first element which is 'PAResponse'
            String prefix = String.join("_", tagPath.subList(1, tagPath.size()));
            System.out.print(prefix);
        }
    }

    public static void main(String[] args) {
        XmlProcessor processor = new XmlProcessor();
        processor.printFirstPAResponseTagValues("path_to_your_xml_file.xml"); // Replace with your actual file path
    }
}
