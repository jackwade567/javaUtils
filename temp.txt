import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLEventReader;
import javax.xml.stream.events.XMLEvent;
import javax.xml.stream.events.StartElement;
import javax.xml.stream.events.Characters;
import javax.xml.stream.events.EndElement;
import javax.xml.stream.XMLStreamException;
import java.io.FileInputStream;
import java.util.Stack;

public class XmlProcessor {

    public void printLeafTagValuesWithHierarchy(String xmlFilePath) {
        XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();

        try {
            XMLEventReader reader = xmlInputFactory.createXMLEventReader(new FileInputStream(xmlFilePath));
            Stack<String> tagPath = new Stack<>();
            Stack<Boolean> hasContentStack = new Stack<>(); // Stack to track if tags have content
            boolean insidePAResponse = false;

            while (reader.hasNext()) {
                XMLEvent event = reader.nextEvent();

                if (event.isStartElement()) {
                    StartElement startElement = event.asStartElement();
                    String tagName = startElement.getName().getLocalPart();
                    if ("PAResponse".equals(tagName)) {
                        insidePAResponse = true;
                    } else if (insidePAResponse) {
                        tagPath.push(tagName); // Push the tag name onto the stack
                        hasContentStack.push(false); // Initialize as false, meaning no content yet
                    }
                } else if (event.isCharacters() && insidePAResponse) {
                    Characters characters = event.asCharacters();
                    if (!characters.isWhiteSpace()) {
                        if (!hasContentStack.isEmpty()) {
                            hasContentStack.pop();
                            hasContentStack.push(true); // Set to true, the tag contains content
                        }
                    }
                } else if (event.isEndElement()) {
                    EndElement endElement = event.asEndElement();
                    String tagName = endElement.getName().getLocalPart();
                    if ("PAResponse".equals(tagName)) {
                        insidePAResponse = false;
                    } else if (insidePAResponse && !tagPath.isEmpty() && tagName.equals(tagPath.peek())) {
                        boolean hasContent = !hasContentStack.pop(); // Check if the tag had content
                        if (!hasContent) { // If no content, this is a leaf node
                            String fullPath = buildPath(tagPath);
                            System.out.println(fullPath + ": "); // Print the tag with an empty value
                        }
                        tagPath.pop(); // The tag is fully processed, remove it from the stack
                    }
                }
            }
        } catch (XMLStreamException e) {
            e.printStackTrace();
        }
    }

    private String buildPath(Stack<String> tagPath) {
        // Skip the 'PAResponse' tag and build the path for the current tag
        if (!tagPath.isEmpty()) {
            Stack<String> tempStack = new Stack<>();
            tempStack.addAll(tagPath);
            tempStack.pop(); // Remove the current tag to only get the parent tags
            return String.join("_", tempStack);
        }
        return "";
    }

    public static void main(String[] args) {
        XmlProcessor processor = new XmlProcessor();
        processor.printLeafTagValuesWithHierarchy("path_to_your_xml_file.xml"); // Replace with the actual file path
    }
}
