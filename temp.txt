import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLEventReader;
import javax.xml.stream.events.XMLEvent;
import javax.xml.stream.events.StartElement;
import javax.xml.stream.events.EndElement;
import javax.xml.stream.XMLStreamException;
import java.io.FileInputStream;
import java.util.Stack;

public class XmlProcessor {

    public void printFirstPAResponseTagValues(String xmlFilePath) {
        XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();

        try {
            XMLEventReader reader = xmlInputFactory.createXMLEventReader(new FileInputStream(xmlFilePath));
            boolean insidePAResponse = false; // Flag to track if we're inside the PAResponse tag
            Stack<String> tagPath = new Stack<>(); // Stack to keep track of nested tags
            Stack<Boolean> leafNodeStack = new Stack<>(); // Stack to keep track if current node is a leaf

            while (reader.hasNext()) {
                XMLEvent event = reader.nextEvent();
                if (event.isStartElement()) {
                    StartElement startElement = event.asStartElement();
                    String tagName = startElement.getName().getLocalPart();

                    if ("PAResponse".equals(tagName)) {
                        insidePAResponse = true; // We have entered the PAResponse tag
                        leafNodeStack.push(true); // The PAResponse itself is not considered a leaf node
                    } else if (insidePAResponse) {
                        // Push the tag onto the stack if we are within a PAResponse
                        tagPath.push(tagName);
                        leafNodeStack.push(true); // Assume it's a leaf node until we find a nested tag
                    }
                } else if (event.isCharacters() && insidePAResponse && !event.asCharacters().isWhiteSpace()) {
                    String value = event.asCharacters().getData();
                    if (!leafNodeStack.peek()) {
                        // Not a leaf node, skip printing
                        continue;
                    }
                    printTagPath(tagPath); // Print the current tag path
                    System.out.println(": " + value);
                } else if (event.isEndElement()) {
                    EndElement endElement = event.asEndElement();
                    String tagName = endElement.getName().getLocalPart();

                    if ("PAResponse".equals(tagName)) {
                        insidePAResponse = false; // We have exited the PAResponse tag
                        leafNodeStack.pop(); // Pop the PAResponse node
                        break; // Stop processing since we're done with the first PAResponse
                    } else if (!tagPath.isEmpty() && tagName.equals(tagPath.peek())) {
                        tagPath.pop(); // Pop the tag from the stack when we reach its end tag
                        boolean wasLeafNode = leafNodeStack.pop(); // Check if it was a leaf node
                        // If it was a leaf node and the stack is empty, print the path
                        if (wasLeafNode && tagPath.isEmpty()) {
                            printTagPath(tagPath);
                            System.out.println(": " + ""); // Print empty value for leaf nodes
                        }
                    }
                }
                
                // If we find a start tag inside another tag, it's not a leaf node
                if (!leafNodeStack.isEmpty() && event.isStartElement() && !tagPath.isEmpty()) {
                    leafNodeStack.set(leafNodeStack.size() - 1, false);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void printTagPath(Stack<String> tagPath) {
        if (!tagPath.isEmpty()) {
            String prefix = String.join("_", tagPath);
            System.out.print(prefix);
        }
    }

    public static void main(String[] args) {
        XmlProcessor processor = new XmlProcessor();
        processor.printFirstPAResponseTagValues("path_to_your_xml_file.xml"); // Replace with your actual file path
    }
}
