import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLEventReader;
import javax.xml.stream.events.XMLEvent;
import javax.xml.stream.events.StartElement;
import javax.xml.stream.events.EndElement;
import javax.xml.stream.XMLStreamException;
import java.io.FileInputStream;
import java.util.Stack;

public class XmlProcessor {

    public void printFirstPAResponseTagValues(String xmlFilePath) {
        XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();

        try {
            XMLEventReader reader = xmlInputFactory.createXMLEventReader(new FileInputStream(xmlFilePath));
            boolean insidePAResponse = false;
            Stack<String> tagPath = new Stack<>();
            boolean isValuePrinted = false;

            while (reader.hasNext()) {
                XMLEvent event = reader.nextEvent();

                if (event.isStartElement()) {
                    StartElement startElement = event.asStartElement();
                    String tagName = startElement.getName().getLocalPart();

                    if ("PAResponse".equals(tagName)) {
                        insidePAResponse = true;
                        continue; // Skip this tag but mark that we're inside it
                    }

                    if (insidePAResponse) {
                        tagPath.push(tagName); // Push the tag name onto the stack
                        isValuePrinted = false; // Reset the flag as this is a new tag
                    }
                } else if (event.isCharacters() && insidePAResponse && !event.asCharacters().isWhiteSpace()) {
                    String value = event.asCharacters().getData();
                    if (!isValuePrinted) {
                        printTagPath(tagPath, value); // Print the tag and value
                        isValuePrinted = true;
                    }
                } else if (event.isEndElement()) {
                    EndElement endElement = event.asEndElement();
                    String tagName = endElement.getName().getLocalPart();

                    if ("PAResponse".equals(tagName)) {
                        insidePAResponse = false;
                        break; // We're done with the first PAResponse
                    }

                    if (insidePAResponse && !tagPath.isEmpty() && tagName.equals(tagPath.peek())) {
                        if (!isValuePrinted) {
                            // The tag had no value, print with an empty value
                            printTagPath(tagPath, "");
                        }
                        tagPath.pop(); // This tag is fully processed, remove it
                        isValuePrinted = false; // Reset the flag as we might encounter more tags
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void printTagPath(Stack<String> tagPath, String value) {
        if (!tagPath.isEmpty()) {
            // Create a prefix excluding the 'PAResponse' and the current tag itself
            String prefix = String.join("_", tagPath.subList(0, tagPath.size() - 1));
            if (!prefix.isEmpty()) {
                prefix += "_"; // Add an underscore only if there is a prefix
            }
            System.out.println(prefix + tagPath.peek() + ": " + value);
        }
    }

    public static void main(String[] args) {
        XmlProcessor processor = new XmlProcessor();
        processor.printFirstPAResponseTagValues("path_to_your_xml_file.xml"); // Replace with the file path
    }
}
