import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLEventReader;
import javax.xml.stream.events.XMLEvent;
import javax.xml.stream.events.StartElement;
import javax.xml.stream.events.EndElement;
import javax.xml.stream.XMLStreamException;
import java.io.FileInputStream;
import java.util.Stack;

public class XmlProcessor {

    public void printFirstPAResponseTagValues(String xmlFilePath) {
        XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();

        try {
            XMLEventReader reader = xmlInputFactory.createXMLEventReader(new FileInputStream(xmlFilePath));
            boolean insidePAResponse = false; // Flag to track if we're inside the PAResponse tag
            Stack<String> tagPath = new Stack<>(); // Stack to keep track of nested tags

            while (reader.hasNext()) {
                XMLEvent event = reader.nextEvent();
                if (event.isStartElement()) {
                    StartElement startElement = event.asStartElement();
                    String tagName = startElement.getName().getLocalPart();

                    if ("PAResponse".equals(tagName)) {
                        insidePAResponse = true; // We have entered the PAResponse tag
                    } else if (insidePAResponse) {
                        // Push the tag onto the stack if we are within a PAResponse
                        tagPath.push(tagName);
                    }
                } else if (event.isCharacters() && insidePAResponse) {
                    String value = event.asCharacters().getData().trim();
                    if (!value.isEmpty()) {
                        // We have a value, so print the current tag path minus the last element
                        printTagPath(tagPath);
                        System.out.println(": " + value);
                    }
                } else if (event.isEndElement()) {
                    EndElement endElement = event.asEndElement();
                    String tagName = endElement.getName().getLocalPart();

                    if ("PAResponse".equals(tagName)) {
                        insidePAResponse = false; // We have exited the PAResponse tag
                        break; // Stop processing since we're done with the first PAResponse
                    } else if (!tagPath.isEmpty() && tagName.equals(tagPath.peek())) {
                        tagPath.pop(); // Pop the tag from the stack when we reach its end tag
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void printTagPath(Stack<String> tagPath) {
        // Join all tags except the last one to create the prefix
        if (tagPath.size() > 1) {
            String prefix = String.join("_", tagPath.subList(0, tagPath.size() - 1));
            System.out.print(prefix + "_" + tagPath.peek());
        } else {
            System.out.print(tagPath.peek());
        }
    }

    public static void main(String[] args) {
        XmlProcessor processor = new XmlProcessor();
        processor.printFirstPAResponseTagValues("path_to_your_xml_file.xml"); // Replace with your actual file path
    }
}
